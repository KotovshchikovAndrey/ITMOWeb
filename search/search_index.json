{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041a\u043e\u0442\u043e\u0432\u0449\u0438\u043a\u043e\u0432 \u0410\u043d\u0434\u0440\u0435\u0439 \u0420\u043e\u043c\u0430\u043d\u043e\u0432\u0447\u0438 K3339","text":""},{"location":"lab1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI","text":""},{"location":"lab1/#_1","title":"\u0421\u0441\u044b\u043b\u043a\u0430","text":"<p>\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0435\u043c\u044b \u0431\u044b\u043b\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043b\u044e\u0434\u0435\u0439 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443.</p>"},{"location":"lab1/#_2","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f jwt \u0442\u043e\u043a\u0435\u043d\u044b, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>PyJWT</code>. \u041f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0432\u043e\u0439 email \u0438 \u043f\u0430\u0440\u043e\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 <code>sha256</code> \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438 \u0443\u0442\u0435\u0447\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0411\u0414 \u043d\u0435\u043b\u044c\u0437\u044f \u0431\u044b\u043b\u043e \u0435\u0433\u043e \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438. \u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 jwt \u0442\u043e\u043a\u0435\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 Authorization \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b.</p> <pre><code>    ...\n\n    async def sign_up(self, dto: UserCreateDTO) -&gt; UserTokenDTO:\n        stmt = exists().where(User.email == dto.email).select()\n        is_exists = (await self._session.execute(stmt)).scalar()\n        if is_exists:\n            raise HTTPException(\n                status_code=status.HTTP_409_CONFLICT,\n                detail=\"Email occupied by another user\",\n            )\n\n        new_user = User(\n            email=dto.email,\n            password=self._hash_password(dto.password),\n        )\n\n        self._session.add(new_user)\n        await self._session.commit()\n        await self._session.refresh(new_user)\n\n        return UserTokenDTO(\n            token=self._issue_token(new_user),\n            user=UserDTO.model_validate(new_user),\n        )\n\n    ...\n</code></pre> <p>\u041c\u0435\u0442\u043e\u0434 sign_up \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043e\u0431\u044a\u0435\u043a\u0442 DTO, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u0442\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 email \u0435\u0449\u0435 \u043d\u0435 \u0437\u0430\u043d\u044f\u0442, \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0435\u0435 \u0432 \u0411\u0414, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 jwt \u0442\u043e\u043a\u0435\u043d \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 UserTokenDTO</p> <p></p> <p>\u0422\u0430\u043a \u043a\u0430\u043a \u0442\u043e\u043a\u0435\u043d \u0438\u043c\u0435\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043d\u043e\u0432\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 <code>/sign-in</code></p> <pre><code>...\n\nasync def sign_in(self, dto: UserCreateDTO) -&gt; UserTokenDTO:\n        stmt = select(User).where(User.email == dto.email)\n        user = (await self._session.execute(stmt)).scalar()\n        if (user is None) or (self._hash_password(dto.password) != user.password):\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Invalid email or password\",\n            )\n\n        return UserTokenDTO(\n            token=self._issue_token(user),\n            user=UserDTO.model_validate(user),\n        )\n\n...\n</code></pre> <p>\u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u043e\u043b\u044f \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0435\u0433\u043e \u0437\u0430\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u043b\u0435\u0436\u0438\u0442 \u0432 \u043d\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445</p>"},{"location":"lab1/#_3","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u0444\u0438\u043b\u044f\u043c\u0438","text":"<p>\u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043e\u043f\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435, \u0441\u0432\u043e\u0438\u0445 \u043d\u0430\u0432\u044b\u043a\u0430\u0445, \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c:</p> <pre><code>...\n\n async def create_profile(self, me: UserDTO, dto: ProfileCreateDTO) -&gt; ProfileDTO:\n        stmt = exists().where(Profile.user_id == me.id).select()\n        is_exists = (await self._session.execute(stmt)).scalar()\n        if is_exists:\n            raise HTTPException(\n                status_code=status.HTTP_409_CONFLICT,\n                detail=\"Profile has already been created\",\n            )\n\n        new_profile = Profile(**dto.model_dump(), user_id=me.id)\n        self._session.add(new_profile)\n        await self._session.commit()\n        await self._session.refresh(new_profile)\n\n        return ProfileDTO.model_validate(new_profile)\n\n...\n</code></pre> <p></p> <p>\u0422\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u043d\u043e\u0444\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u0444\u0438\u043b\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 HTTP \u043c\u0435\u0442\u043e\u0434\u0430 <code>PATCH</code>:</p> <pre><code>async def update_profile(self, me: UserDTO, dto: ProfileUpdateDTO) -&gt; ProfileDTO:\n        stmt = select(Profile).where(Profile.user_id == me.id)\n        profile = (await self._session.execute(stmt)).scalar()\n        if profile is None:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Profile not found\",\n            )\n\n        dict_dto = dto.model_dump(exclude_unset=True)\n        for key, value in dict_dto.items():\n            setattr(profile, key, value)\n\n        self._session.add(profile)\n        await self._session.commit()\n        await self._session.refresh(profile)\n\n        return ProfileDTO.model_validate(profile)\n</code></pre> <p></p> <p>\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043e\u043f\u0446\u0438\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439 \u043f\u043e \u043d\u0430\u0432\u044b\u043a\u0430\u043c, \u043e\u043f\u044b\u0442\u0443 \u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430\u043c:</p> <pre><code> async def search_profiles(self, dto: CriteriaDTO) -&gt; ProfileListDTO:\n        search_list = []\n        if dto.work_experience:\n            search_list.append(Profile.work_experience &gt;= dto.work_experience)\n\n        if dto.skills:\n            search_list.append(\n                select(ProfileSkill)\n                .join(Skill, ProfileSkill.skill_id == Skill.id)\n                .where(\n                    Skill.name.in_(dto.skills),\n                    ProfileSkill.profile_id == Profile.id,\n                )\n                .exists()\n            )\n\n        if dto.interests:\n            search_list.append(\n                or_(\n                    *[\n                        Profile.about_me.like(f\"%{interest}%\")\n                        for interest in dto.interests\n                    ]\n                )\n            )\n\n        stmt = select(Profile).where(*search_list)\n        profiles = (await self._session.execute(stmt)).scalars().all()\n        return ProfileListDTO(\n            total=len(profiles),\n            profiles=[ProfileDTO.model_validate(profile) for profile in profiles],\n        )\n</code></pre> <p></p> <p>\u0412 \u043b\u044e\u0431\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0432\u043e\u0435\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u0435 \u0447\u0435\u0440\u0435\u0437 <code>GET /me</code>:</p> <pre><code> async def get_my_profile(self, me: UserDTO) -&gt; ProfileDTO:\n        stmt = (\n            select(Profile)\n            .where(Profile.user_id == me.id)\n            .options(\n                selectinload(Profile.skills),\n                joinedload(Profile.user),\n            )\n        )\n\n        profile = (await self._session.execute(stmt)).scalar()\n        if profile is None:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Profile not found\",\n            )\n\n        return ProfileDTO.model_validate(profile)\n</code></pre> <p></p>"},{"location":"lab1/#_4","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438","text":"<p>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u0441\u0442\u0430\u0442\u044c \u0435\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c (owner):</p> <pre><code> async def create_project(self, me: UserDTO, dto: ProjectCreateDTO) -&gt; ProjectDTO:\n    project = Project(**dto.model_dump(), owner_id=me.id)\n    self._session.add(project)\n    await self._session.commit()\n    await self._session.refresh(project)\n\n    return ProjectDTO.model_validate(project)\n</code></pre> <p></p> <p>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043e\u043d \u0438\u043c\u0435\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f (\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u043b\u0435\u043d\u043e\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0438\u043c\u0435\u044e\u0449\u0435\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0443) \u0447\u0435\u0440\u0435\u0437 <code>GET /profiles</code></p> <pre><code> async def get_allowed_projects(\n        self, me: UserDTO, limit: int, offset: Optional[int] = None\n    ) -&gt; list[ProjectDTO]:\n        stmt = (\n            select(Project)\n            .join(Workflow, Workflow.project_id == Project.id)\n            .where(\n                Workflow.team_id.in_(\n                    select(Member.team_id).where(Member.user_id == me.id).subquery()\n                )\n            )\n            .limit(limit)\n            .offset(offset or 0)\n        )\n\n        projects = (await self._session.execute(stmt)).scalars().unique()\n        return [ProjectDTO.model_validate(project) for project in projects]\n</code></pre> <p></p>"},{"location":"lab1/#_5","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438","text":"<p>\u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u043b\u0435\u043d\u043e\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435\u0445 \u0435\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 <code>GET /teams/{team_id}/members</code></p> <p></p>"},{"location":"practice1.1/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 FastAPI","text":""},{"location":"practice1.1/#_1","title":"\u0421\u0441\u044b\u043b\u043a\u0430","text":""},{"location":"practice1.1/#_2","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0435\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f","text":"<pre><code>python -m venv venv\nsource venv/Scripts/activate\n</code></pre>"},{"location":"practice1.1/#fastapi","title":"\u0423\u0442\u0430\u043d\u043e\u0432\u043a\u0430 FastAPI","text":"<pre><code>pip install fastapi[all]\n</code></pre>"},{"location":"practice1.1/#_3","title":"\u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0411\u0414","text":"<p>\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u0445 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0431\u044b\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b\u0435 <code>main.py</code>:</p> <pre><code>professions = [\n    {\n        \"id\": 1,\n        \"title\": \"\u0418\u043d\u0436\u0435\u043d\u0435\u0440-\u0441\u0445\u0435\u043c\u043e\u0442\u0435\u0445\u043d\u0438\u043a\",\n        \"description\": \"\u041f\u0430\u044f\u0435\u0442 \u0441\u0445\u0435\u043c\u044b\",\n    }\n]\n\ntemp_bd = [\n    {\n        \"id\": 1,\n        \"race\": \"director\",\n        \"name\": \"\u041c\u0430\u0440\u0442\u044b\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439\",\n        \"level\": 12,\n        \"profession\": {\n            \"id\": 1,\n            \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\",\n            \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\",\n        },\n        \"skills\": [\n            {\"id\": 1, \"name\": \"\u041a\u0443\u043f\u043b\u0435-\u043f\u0440\u043e\u0434\u0430\u0436\u0430 \u043a\u043e\u043c\u043f\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432\", \"description\": \"\"},\n            {\"id\": 2, \"name\": \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\", \"description\": \"\"},\n        ],\n    },\n    {\n        \"id\": 2,\n        \"race\": \"worker\",\n        \"name\": \"\u0410\u043d\u0434\u0440\u0435\u0439 \u041a\u043e\u0441\u044f\u043a\u0438\u043d\",\n        \"level\": 12,\n        \"profession\": {\n            \"id\": 1,\n            \"title\": \"\u0414\u0435\u043b\u044c\u0444\u0438\u0441\u0442-\u0433\u0440\u0435\u0431\u0435\u0446\",\n            \"description\": \"\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\",\n        },\n        \"skills\": [],\n    },\n]\n</code></pre>"},{"location":"practice1.1/#_4","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","text":"<p>\u0414\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b pydantic \u043c\u043e\u0434\u0435\u043b\u0438. \u041e\u043d\u0438 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 <code>models.py</code> \u0438 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u0445\u0440\u0430\u043d\u044f\u0449\u0443\u044e\u0441\u044f \u0432 \u0411\u0414:</p> <pre><code>class RaceType(Enum):\n    director = \"director\"\n    worker = \"worker\"\n    junior = \"junior\"\n\n\nclass Profession(BaseModel):\n    id: int\n    title: str\n    description: str\n\n\nclass Skill(BaseModel):\n    id: int\n    name: str\n    description: str\n\n\nclass Warrior(BaseModel):\n    id: int\n    race: RaceType\n    name: str\n    level: int\n    profession: Profession\n    skills: Optional[List[Skill]] = []\n</code></pre>"},{"location":"practice1.1/#api","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 API \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0432\u043e\u0438\u043d\u043e\u0432","text":"<p>\u0414\u0430\u043b\u0435\u0435 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b api \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u0445 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0432\u043e\u0439\u043d\u0430\u043c\u0438:</p> <p>1 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u043e\u0438\u043d\u043e\u0432:</p> <pre><code>@app.get(\"/warriors_list\")\ndef warriors_list() -&gt; List[Warrior]:\n    return temp_bd\n</code></pre> <p>2 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0432\u043e\u0438\u043d\u0430 \u043f\u043e \u0435\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443:</p> <pre><code>@app.get(\"/warrior/{warrior_id}\")\ndef warriors_get(warrior_id: int) -&gt; List[Warrior]:\n    return [warrior for warrior in temp_bd if warrior.get(\"id\") == warrior_id]\n</code></pre> <p>3 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</p> <pre><code>@app.post(\"/warrior\")\ndef warriors_create(warrior: Warrior):\n    warrior_to_append = warrior.model_dump()\n    temp_bd.append(warrior_to_append)\n    return {\"status\": 200, \"data\": warrior}\n</code></pre> <p>4 \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</p> <pre><code>@app.put(\"/warrior/{warrior_id}\")\ndef warrior_update(warrior_id: int, warrior: Warrior) -&gt; List[Warrior]:\n    for war in temp_bd:\n        if war.get(\"id\") == warrior_id:\n            warrior_to_append = warrior.model_dump()\n            temp_bd.remove(war)\n            temp_bd.append(warrior_to_append)\n    return temp_bd\n</code></pre> <p>5 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</p> <pre><code>@app.delete(\"/warrior/{warrior_id}\")\ndef warrior_delete(warrior_id: int):\n    for i, warrior in enumerate(temp_bd):\n        if warrior.get(\"id\") == warrior_id:\n            temp_bd.pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n</code></pre> <p>\u041a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u0449\u0438 \u0443\u0442\u0438\u043b\u0438\u0442\u044b curl:</p> <p></p>"},{"location":"practice1.1/#api_1","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 API \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439","text":"<p>\u0414\u0430\u043b\u0435\u0435 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044e \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0435 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439:</p> <p>1 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439:</p> <pre><code>@app.get(\"/professions\")\ndef profession_list() -&gt; List[Profession]:\n    return professions\n</code></pre> <p>2 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</p> <pre><code>@app.post(\"/professions\")\ndef profession_create(profession: Profession):\n    profession_dict = profession.model_dump()\n    professions.append(profession_dict)\n    return {\"status\": 201, \"data\": profession}\n</code></pre> <p>3 \u041f\u043e\u043b\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438 \u043f\u043e id:</p> <pre><code>@app.put(\"/professions/{profession_id}\")\ndef profession_update(profession_id: int, profession: Profession):\n    for prof in professions:\n        if prof.get(\"id\") == profession_id:\n            profession_dict = profession.model_dump()\n            professions.remove(prof)\n            professions.append(profession_dict)\n\n    return {\"status\": 201, \"data\": profession}\n</code></pre> <p>4 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438 \u043f\u043e id:</p> <pre><code>@app.delete(\"/professions/{profession_id}\")\ndef profession_delete(profession_id: int):\n    for prof in professions:\n        if prof.get(\"id\") == profession_id:\n            professions.remove(prof)\n            break\n\n    return {\"status\": 201, \"data\": \"deleted\"}\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <p></p>"},{"location":"practice1.2/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.2. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0411\u0414, SQLModel \u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 Alembic","text":""},{"location":"practice1.2/#_1","title":"\u0421\u0441\u044b\u043b\u043a\u0430","text":""},{"location":"practice1.2/#_2","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439","text":"<p>\u0414\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0434\u0440\u0430\u0439\u0432\u0435\u0440 psycong2. \u041e\u0434\u043d\u0430\u043a\u0430 \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u044b\u0440\u044b\u0435 SQL \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0443\u0434\u043e\u0431\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u044b\u043b\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 sqlmodel, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0434 \u043a\u043e\u043f\u043e\u0442\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 ORM SQLAlchemy \u0438 \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0441\u0442\u0432\u0438\u0435 \u0441 \u0411\u0414:</p> <pre><code>pip install sqlmodel\npip install psycopg2-binary\n</code></pre>"},{"location":"practice1.2/#_3","title":"\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0411\u0414","text":"<p>\u0432 \u0444\u0430\u0439\u043b\u0435 <code>connection.py</code> \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043a\u043e\u0434 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u044b\u043b\u0430 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 docker:</p> <pre><code>from sqlmodel import SQLModel, Session, create_engine\n\ndb_url = \"postgresql://postgres:postgres@localhost:5433/warriors_db\"\nengine = create_engine(db_url, echo=True)\n\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre> <p>\u0424\u0443\u043d\u043a\u0438\u044f get_session \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0422\u0430\u043a \u043a\u0430\u043a \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0435 \u0442\u0440\u0431\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 init_db:</p> <pre><code>@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n</code></pre>"},{"location":"practice1.2/#_4","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","text":"<p>\u0412\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435 <code>models.py</code> \u0431\u044b\u043b\u0438 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0430 SQLModel \u0432\u043c\u0435\u0441\u0442\u043e pydantic:</p> <pre><code>class SkillWarriorLink(SQLModel, table=True):\n    skill_id: Optional[int] = Field(\n        default=None, foreign_key=\"skill.id\", primary_key=True\n    )\n    warrior_id: Optional[int] = Field(\n        default=None, foreign_key=\"warrior.id\", primary_key=True\n    )\n\n\nclass SkillDefault(SQLModel):\n    name: str\n    description: Optional[str] = \"\"\n\n\nclass Skill(SkillDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    warriors: Optional[List[\"Warrior\"]] = Relationship(\n        back_populates=\"skills\", link_model=SkillWarriorLink\n    )\n\n\nclass ProfessionDefault(SQLModel):\n    title: str\n    description: str\n\n\nclass Profession(ProfessionDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    warriors_prof: List[\"Warrior\"] = Relationship(back_populates=\"profession\")\n\n\nclass WarriorDefault(SQLModel):\n    race: RaceType\n    name: str\n    level: int\n    profession_id: Optional[int] = Field(default=None, foreign_key=\"profession.id\")\n\n\nclass Warrior(WarriorDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    profession: Optional[Profession] = Relationship(\n        back_populates=\"warriors_prof\",\n        sa_relationship_kwargs={\"lazy\": \"joined\"},\n    )\n\n    skills: Optional[List[Skill]] = Relationship(\n        back_populates=\"warriors\",\n        link_model=SkillWarriorLink,\n        sa_relationship_kwargs={\"uselist\": True, \"lazy\": \"selectin\"},\n    )\n\n\nclass WarriorProfessions(WarriorDefault):\n    profession: Optional[Profession] = None\n\n\nclass WarriorResponse(WarriorProfessions):\n    id: int\n    skills: List[Skill]\n</code></pre> <p>\u0412\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438 \u043f\u043e\u043c\u0435\u0447\u0435\u043d\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c <code>table=True</code></p>"},{"location":"practice1.2/#api","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 API \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u043e \u0432\u0441\u0435\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u0445 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c / \u0441\u043e\u0437\u0434\u0430\u0435\u043c / \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c / \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 \u0445\u0440\u0430\u043d\u0438\u043c \u0432\u0441\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL, \u0432\u043c\u0435\u0441\u0442\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>@app.post(\"/warrior\")\ndef warriors_create(warrior: WarriorDefault, session=Depends(get_session)):\n    warrior = Warrior.model_validate(warrior)\n    session.add(warrior)\n    session.commit()\n    session.refresh(warrior)\n    return {\"status\": 200, \"data\": warrior}\n\n\n@app.get(\"/warriors_list\")\ndef warriors_list(session=Depends(get_session)) -&gt; List[Warrior]:\n    return session.exec(select(Warrior)).all()\n\n\n@app.get(\"/warrior/{warrior_id}\", response_model=WarriorResponse)\ndef warriors_get(warrior_id: int, session=Depends(get_session)) -&gt; Warrior:\n    warrior = session.get(Warrior, warrior_id)\n    return warrior\n\n\n@app.patch(\"/warrior/{warrior_id}\")\ndef warrior_update(\n    warrior_id: int, warrior: WarriorDefault, session=Depends(get_session)\n) -&gt; WarriorDefault:\n    db_warrior = session.get(Warrior, warrior_id)\n    if not db_warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n\n    warrior_data = warrior.model_dump(exclude_unset=True)\n    for key, value in warrior_data.items():\n        setattr(db_warrior, key, value)\n\n    session.add(db_warrior)\n    session.commit()\n    session.refresh(db_warrior)\n    return db_warrior\n\n\n@app.delete(\"/warrior/{warrior_id}\")\ndef warrior_delete(warrior_id: int, session=Depends(get_session)):\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n    session.delete(warrior)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.get(\"/professions_list\")\ndef professions_list(session=Depends(get_session)) -&gt; List[Profession]:\n    return session.exec(select(Profession)).all()\n\n\n@app.get(\"/profession/{profession_id}\")\ndef profession_get(profession_id: int, session=Depends(get_session)) -&gt; Profession:\n    return session.get(Profession, profession_id)\n\n\n@app.post(\"/profession\")\ndef profession_create(prof: ProfessionDefault, session=Depends(get_session)):\n    prof = Profession.model_validate(prof)\n    session.add(prof)\n    session.commit()\n    session.refresh(prof)\n    return {\"status\": 200, \"data\": prof}\n</code></pre>"},{"location":"practice1.2/#api_1","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 API \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u0438\u0439 \u0432\u043e\u0438\u043d\u043e\u0432 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0443\u043c\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0432\u043e\u0439\u043d\u0430","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 \u0434\u0432\u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u043b\u0435\u043d\u044b API \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0432\u043e\u0438\u043d\u043e\u0432:</p> <pre><code>@app.get(\"/skills\")\ndef skills_list(session=Depends(get_session)) -&gt; List[Skill]:\n    return session.exec(select(Skill)).all()\n\n\n@app.post(\"/skills\")\ndef skill_create(skill: SkillDefault, session=Depends(get_session)):\n    skill = Skill.model_validate(skill)\n    session.add(skill)\n    session.commit()\n    session.refresh(skill)\n    return {\"status\": 200, \"data\": skill}\n\n\n@app.patch(\"/skills/{skill_id}\")\ndef skill_update(\n    skill_id: int,\n    skill: SkillDefault,\n    session=Depends(get_session),\n) -&gt; SkillDefault:\n    db_skill = session.get(Skill, skill_id)\n    if not db_skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n\n    skill_data = skill.model_dump(exclude_unset=True)\n    for key, value in skill_data.items():\n        setattr(db_skill, key, value)\n\n    session.add(db_skill)\n    session.commit()\n    session.refresh(db_skill)\n    return db_skill\n\n\n@app.delete(\"/skills/{skill_id}\")\ndef skill_delete(skill_id: int, session=Depends(get_session)):\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n\n    session.delete(skill)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>\u0418 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0446\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u0432\u043e\u0438\u043d\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438:</p> <pre><code>@app.post(\"/skill_warriors\")\ndef warrior_slill_add(skill_warrior: SkillWarriorLink, session=Depends(get_session)):\n    skill = session.get(Skill, skill_warrior.skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n\n    warrior = session.get(Warrior, skill_warrior.warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n\n    if skill not in warrior.skills:\n        session.add(skill_warrior)\n        session.commit()\n\n    return {\"ok\": True}\n</code></pre>"},{"location":"practice1.3/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.3. \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, ENV, GitIgnore \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":""},{"location":"practice1.3/#_1","title":"\u0421\u0441\u044b\u043b\u043a\u0430","text":""},{"location":"practice1.3/#_2","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439","text":"<p>\u0414\u043b\u044f \u0443\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 \u0438\u043b\u0438 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0432 \u043d\u0438\u0445 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u0438\u0441\u0442\u0430\u043c\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439.</p> <p>\u0412 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0431\u044b\u043b\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 alembic. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0435\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 <code>pip</code>:</p> <pre><code>pip install alembic\n</code></pre> <p>\u0417\u0430\u0442\u0435\u043c \u043f\u0440\u043e\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0443 <code>migrations</code>, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u043a\u043e\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0438 \u0441\u0430\u043c\u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438:</p> <pre><code>alembic init migrations\n</code></pre> <p>\u0422\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c <code>sqlmodel</code> \u0435\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439:</p> <p></p> <p>\u0414\u0430\u043b\u0435\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442 \u0431\u044b\u043b \u0432\u043d\u0435\u0434\u0440\u0435\u043d \u0444\u0430\u0439\u043b .env, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f DB_ADMIN, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u042d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438 \u0441\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0443\u0447\u0435\u0442\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043e\u0442 \u0442\u0440\u0435\u0442\u044c\u0438\u0445 \u043b\u0438\u0446.</p> <p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 <code>python-dotenv</code>:</p> <pre><code>pip install python-dotenv\n</code></pre> <p>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>env.py</code> \u0432 \u043f\u0430\u043f\u043a\u0435 <code>migrations</code> \u0431\u044b\u043b\u0438 \u0432\u043d\u0435\u0441\u0435\u043d\u044b \u0441\u043b\u0443\u0434\u0443\u044e\u0449\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f:</p> <pre><code>from sqlmodel import SQLModel\nfrom models import SkillWarriorLink, Skill, Warrior, Profession, WarriorProfessions\n\nload_dotenv()\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\nif not config.get_main_option(\"sqlalchemy.url\"):\n    config.set_main_option(\"sqlalchemy.url\", os.getenv(\"DB_ADMIN\"))\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = SQLModel.metadata\n</code></pre> <p>\u0417\u0434\u0435\u0441\u044c \u043c\u044b \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430 \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>sqlalchemy.url</code> \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>DB_ADMIN</code>, \u0442\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044f \u0430\u0434\u0440\u0435\u0441\u0441 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u0443\u0434\u0443\u0442 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u044b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438.</p> <p>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>connection.py</code> \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0411\u0414 \u0431\u0435\u0440\u0443\u0442\u0441\u044f \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>import os\nfrom dotenv import load_dotenv\nfrom sqlmodel import SQLModel, Session, create_engine\n\nload_dotenv()\ndb_url = os.getenv(\"DB_ADMIN\")\nengine = create_engine(db_url, echo=True)\n</code></pre> <p>\u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0432 \u043c\u043e\u0434\u0435\u043b\u044c <code>SkillWarriorLink</code> \u0431\u044b\u043b\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043f\u043e\u043b\u0435 <code>level</code>. \u0417\u0430\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u043d \u0444\u0430\u0439\u043b \u0441 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u043c\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:</p> <pre><code>alembic revision --autogenerate -m \"skill added\"\n</code></pre> <p>\u0412 \u043a\u043e\u043d\u0446\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438:</p> <pre><code>alembic upgrade head\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <p></p>"}]}